AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: |
  sam-app
  Sample SAM Template for sam-app

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Handler: app.lambda_handler
    Timeout: 5
    Runtime: python3.12
    Architectures:
      - x86_64

Parameters:
  ExistingTable:
    Type: String
    Default: nba_table
    Description: (Required) The name of an existing DynamoDB
    MinLength: 3
    MaxLength: 255
    AllowedPattern: ^[A-Za-z_-]+$
    ConstraintDescription: Required. Can be characters, hyphen, and underscore only.
      No numbers or special characters allowed.

  GithubAccessToken:
    Type: String
    Description: Github Access Token
    NoEcho: true

  GithubRepository:
    Type: String
    Description: GitHub repository URL

Resources:

  MyGitHubSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: new-github-token
      Description: GitHub Access Token
      SecretString: !Ref GithubAccessToken

  AmplifyApp:
    Type: AWS::Amplify::App
    Properties:
      Name: amplify-sam-demo-app
      Repository:
        Ref: GithubRepository
      AccessToken: 
        Ref: GithubAccessToken
      IAMServiceRole:
        Fn::GetAtt:
        - AmplifyRole
        - Arn
      EnvironmentVariables:
      - Name: ENDPOINT
        Value:
          Fn::Sub: https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/
    Metadata:
      SamResourceId: AmplifyApp

  AmplifyBranch:
    Type: AWS::Amplify::Branch
    Properties:
      BranchName: main
      AppId:
        Fn::GetAtt:
        - AmplifyApp
        - AppId
      EnableAutoBuild: true
    Metadata:
      SamResourceId: AmplifyBranch

  AmplifyRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - amplify.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: Amplify
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action: amplify:*
            Resource: '*'
    Metadata:
      SamResourceId: AmplifyRole

# IAM Role for API GW + CWL
  CloudWatchRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
        Path: /
        ManagedPolicyArns:
          - 'arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs'

  ApiCWLRoleArn:
    Type: AWS::ApiGateway::Account
    Properties: 
      CloudWatchRoleArn: !GetAtt CloudWatchRole.Arn

  AccessLogGroup:
    Type: AWS::Logs::LogGroup

  RestApi:
    Type: AWS::Serverless::Api
    DependsOn: ApiCWLRoleArn
    Properties:
      OpenApiVersion: '3.0.1'
      EndpointConfiguration: EDGE
      AccessLogSetting:
        DestinationArn: !GetAtt AccessLogGroup.Arn
        Format:
          ' {    "accountId": "$context.accountId",    "apiId": "$context.apiId",    "stage": "$context.stage",    "resourcePath": "$context.resourcePath",    "httpMethod": "$context.httpMethod",    "protocol": "$context.protocol",    "status": "$context.status",    "responseType": "$context.error.responseType",    "error.message": "$context.error.message",    "requestTime": "$context.requestTime",    "requestId": "$context.requestId",    "ip": "$context.identity.sourceIp",    "caller": "$context.identity.caller",    "user": "$context.identity.user",    "responseLength": "$context.responseLength"}'
      StageName: Prod
      MethodSettings:    
        - DataTraceEnabled: true
          HttpMethod: '*'
          LoggingLevel: INFO
          MetricsEnabled: true
          ResourcePath: '/*'
          ThrottlingBurstLimit: 5000
          ThrottlingRateLimit: 10000
      TracingEnabled: true

  HelloWorldFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: src/hello_world/
      Events:
        HelloWorld:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /hello
            Method: get
            RestApiId: !Ref RestApi

  CreatePlayerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/create_player/
      Events:
        CreateActivities:
          Type: Api
          Properties:
            Path: /players
            Method: post
            RestApiId: !Ref RestApi
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ExistingTable
      Environment:
        Variables:
          TABLE: !Ref ExistingTable

  GetPlayerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/get_player/
      Events:
        CreateActivities:
          Type: Api
          Properties:
            Path: /players/{id}
            Method: get
            RestApiId: !Ref RestApi
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ExistingTable
      Environment:
        Variables:
          TABLE: !Ref ExistingTable

  ListPlayersFunction:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 30
      CodeUri: src/list_players/
      Events:
        CreateActivities:
          Type: Api
          Properties:
            Path: /players/
            Method: get
            RestApiId: !Ref RestApi
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ExistingTable
      Environment:
        Variables:
          TABLE: !Ref ExistingTable

  UpdatePlayerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/update_player/
      Events:
        CreateActivities:
          Type: Api
          Properties:
            Path: /players/{id}/{date}
            Method: put
            RestApiId: !Ref RestApi
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ExistingTable
      Environment:
        Variables:
          TABLE: !Ref ExistingTable

  DeletePlayerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/delete_player/
      Events:
        CreateActivities:
          Type: Api
          Properties:
            Path: /players/{id}/{date}
            Method: delete
            RestApiId: !Ref RestApi
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ExistingTable
      Environment:
        Variables:
          TABLE: !Ref ExistingTable

Outputs:
  HelloWorldApi:
    Description: API Gateway endpoint URL for Prod stage for Hello World function
    Value: !Sub https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello
  HelloWorldFunction:
    Description: Hello World Lambda Function ARN
    Value: !GetAtt HelloWorldFunction.Arn
  HelloWorldFunctionIamRole:
    Description: Implicit IAM Role created for Hello World function
    Value: !GetAtt HelloWorldFunctionRole.Arn
  CreatePlayerApi:
    Description: API Gateway endpoint URL for Prod stage for Create Player function
    Value: !Sub https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/players
  CreatePlayerFunction:
    Description: Create Player Lambda Function ARN
    Value: !GetAtt CreatePlayerFunction.Arn
  CreatePlayerFunctionIamRole:
    Description: Implicit IAM Role created for Create Activity function
    Value: !GetAtt CreatePlayerFunctionRole.Arn
  GetPlayerApi:
    Description: API Gateway endpoint URL for Prod stage for Get Player function
    Value: !Sub https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod//players/{id}
  GetPlayerFunction:
    Description: Get Activity Lambda Function ARN
    Value: !GetAtt GetPlayerFunction.Arn
  GetPlayerFunctionIamRole:
    Description: Implicit IAM Role created for Get Player function
    Value: !GetAtt GetPlayerFunctionRole.Arn
  ListPlayersApi:
    Description: API Gateway endpoint URL for Prod stage for List Players function
    Value: !Sub https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/players/
  ListPlayersFunction:
    Description: List Activities Lambda Function ARN
    Value: !GetAtt ListPlayersFunction.Arn
  ListPlayersFunctionIamRole:
    Description: Implicit IAM Role created for List Players function
    Value: !GetAtt ListPlayersFunctionRole.Arn
  UpdatePlayerApi:
    Description: API Gateway endpoint URL for Prod stage for Update Player function
    Value: !Sub https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/update_player/
  UpdatePlayerFunction:
    Description: Update Activity Lambda Function ARN
    Value: !GetAtt UpdatePlayerFunction.Arn
  UpdatePlayerFunctionIamRole:
    Description: Implicit IAM Role created for Update Player function
    Value: !GetAtt UpdatePlayerFunctionRole.Arn
  DeletePlayerApi:
    Description: API Gateway endpoint URL for Prod stage for Delete function
    Value: !Sub https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/players/{id}/{date}
  DeletePlayerFunction:
    Description: Delete Activity Lambda Function ARN
    Value: !GetAtt DeletePlayerFunction.Arn
  DeletePlayerFunctionIamRole:
    Description: Implicit IAM Role created for Delete Player function
    Value: !GetAtt DeletePlayerFunctionRole.Arn